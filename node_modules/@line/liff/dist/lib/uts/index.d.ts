import { UTS, RequiredContext, InitOptions } from '@linecorp/uts';
import { LiffCore } from '../liff';
export interface Analytics {
    context: RequiredContext;
    options?: InitOptions;
}
export declare const LiffUtsLoginStatus: {
    isLoggedIn: number;
    isLiffSuccessful: number;
};
export declare class LiffUTS extends UTS {
}
/**
 * [Internal API] store LIFF id
 * @param uts
 * @param liffId LIFF ID that will be liff.setExtra
 */
export declare const setLiffId: (uts: LiffUTS, liffId: string) => void;
/**
 * [Internal API] store login status
 * @param uts
 * @param isLoggedIn whether a user logged in LIFF App or not will be liff.setExtra
 */
export declare const setIsLoggedIn: (uts: LiffUTS, isLoggedIn: boolean) => void;
/**
 * [Internal API] store if liff.init succeeded
 * @param uts
 * @param isLiffSuccessful whether liff.init was succeeded or not will be liff.setExtra
 */
export declare const setIsLiffSuccessful: (uts: LiffUTS, isLiffSuccessful: boolean) => void;
/**
 * [Internal API] store LIFF SDK version
 * @param uts
 * @param version
 */
export declare const setVersion: (uts: LiffUTS, version: string) => void;
/**
 * [Internal API] send custom event intends liff.init is called
 * @param uts
 */
export declare const sendLiffInit: (uts: LiffUTS) => void;
/**
 * [Internal API] send custom event intends liff.shareTargetPicker is called
 * @param uts
 */
export declare const sendShareTargetPicker: (uts: LiffUTS) => void;
/**
 * [Internal API] bind instance of LiffUTS to given liff (basically it would be window.liff)
 * NOTE: Please call this API after setting all the configuration for LIFF KPI (liffId, mid, tid...)
 * since whether liff.analytics is defined is a clue to judge if UTS in SDK is available
 * @param liff
 * @param uts
 */
export declare const installUts: (liff: LiffCore, uts: LiffUTS) => void;
